#!/usr/bin/env python3

from ament_index_python.packages import get_package_share_directory
from itertools import count, takewhile
from jinja2 import Environment, FileSystemLoader
import os
import sys
import xacro
import xml.dom.minidom


REMOVE_ARGS = ['initial_positions_file']


def process_args(argv, require_input=True):
    parser = ColoredOptionParser(usage="usage: %prog [options] <input>",
                                 formatter=IndentedHelpFormatterWithNL())
    parser.add_option("-o", dest="output", metavar="FILE",
                      help="write output to FILE instead of stdout")
    parser.add_option("-r", dest="ros2control_path", metavar="FILE",
                      help="ros2_control xacro file to be replaced with")
    parser.add_option("-p", dest="prefix",
                      help="prefix for joints and links")


def process_doc(doc, mappings=None, **kwargs):
    # global xacro.verbosity
    # verbosity = kwargs.get('verbosity', verbosity)

    # set substitution args
    xacro.substitution_args_context['arg'] = {} if mappings is None else mappings

    # if not yet defined: initialize filestack
    if not xacro.filestack:
        xacro.init_stacks(None)

    macros = xacro.Table()
    symbols = xacro.Table(xacro._global_symbols)

    # apply xacro:targetNamespace as global xmlns (if defined)
    targetNS = doc.documentElement.getAttribute('xacro:targetNamespace')
    if targetNS:
        doc.documentElement.removeAttribute('xacro:targetNamespace')
        doc.documentElement.setAttribute('xmlns', targetNS)

    robot_node, name = get_robot_name(doc.documentElement)
    urdf = get_urdf_include(robot_node)

    xacro.eval_all(doc.documentElement, macros, symbols)

    # reset substitution args
    xacro.substitution_args_context['arg'] = {}

    return urdf, name, macros


def process_file(input_file_name, **kwargs):
    """main processing pipeline"""
    # initialize file stack for error-reporting
    xacro.init_stacks(input_file_name)
    # parse the document into a xml.dom tree
    doc = xacro.parse(None, input_file_name)
    # perform macro replacement
    urdf, name, macros = process_doc(doc, **kwargs)

    # add xacro auto-generated banner
    banner = [xml.dom.minidom.Comment(c) for c in
              [" %s " % ('=' * 83),
               " |    This document was autogenerated by xacro from %-30s | " % input_file_name,
               " |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED  %-30s | " % "",
               " %s " % ('=' * 83)]]
    first = doc.firstChild
    for comment in banner:
        doc.insertBefore(comment, first)

    return doc, urdf, name, macros

# <robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="ur5">
# get 'ur5'
def get_robot_name(node):
    while node:
        next = node.nextSibling
        if node.nodeType == xml.dom.Node.ELEMENT_NODE:
            if node.tagName == 'robot':
                attr = dict(node.attributes.items())
                if 'name' in attr:
                    return node, attr['name']
                else:
                    return node, None
        node = next

    return None, None


# <xacro:include filename="$(find ur_description)/urdf/ur5e.urdf" />
def get_urdf_include(node):
    node = node.firstChild
    while node:
        next = node.nextSibling
        if node.nodeType == xml.dom.Node.ELEMENT_NODE:
            # print(node.tagName)
            if node.tagName == 'xacro:include':
                attr = dict(node.attributes.items())
                if 'filename' in attr and attr['filename'].endswith('.urdf'):
                    return attr['filename']
                else:
                    return None
        node = next

    return None

# _global_symbols = xacro.create_global_symbols()
def get_params_without_default(params, defaultmap, prefix=''):
    reqd_params = []
    for param in params:
        if param not in defaultmap and param not in REMOVE_ARGS:
            value = ''
            if 'prefix' in param:
                value = prefix
            reqd_params.append({'name': param, 'value': value})

    return reqd_params


# get absolute path of file
# e.g. given package=ur_description, rel_path=urdf/ur5.urdf
def get_abs_path(package, rel_path):
    package_path = get_package_share_directory(package)
    abs_path = package_path + '/' + rel_path
    return abs_path

def get_xacro_template():
    template_dir = os.path.join(os.path.dirname(__file__), '../template')
    environment = Environment(loader=FileSystemLoader(template_dir))
    template = environment.get_template("xacro.template")
    return template


if __name__ == "__main__":
    # this is the xacro from the generated MCP
    # since the package is generated, the path can be hardcoded
    xacropath = sys.argv[1]

    template = get_xacro_template()
    component = {}

    # this is the one to be included in the above file
    # it would include the package name as well
    # e.g. prbt_robot_support/urdf/prbt.ros2_control.xacro
    # this path has be to be converted in the form
    # "$(find prbt_robot_support)/urdf/prbt.ros2_control.xacro
    ros2control_path = sys.argv[2].rstrip('/')
    package = ros2control_path.split('/')[0]
    ros2control_path = ros2control_path.split('/', 1)[1]
    ros2control_abs = get_abs_path(package, ros2control_path)

    # link and joint prefix
    # some xacros use 'tf_prefix' instead of 'prefix'
    prefix = ''
    if len(sys.argv) > 3:
        prefix = sys.argv[3]

    component['package'] = package
    component['ros2control_path'] = ros2control_path

    with open(xacropath) as f:
        _, urdf, name, macros = process_file(xacropath)

        component['urdf'] = urdf

        for name in macros:
            # moveit setup assistant includes the ros2 control xacro with fake controller
            # grab that file
            if 'ros2_control' in name:
                component['fake_hw'] = {}
                component['fake_hw']['name'] = name
                component['fake_hw']['include'] = macros[name].history[0][-1].split('/')[-1]
                break

        component['name'] = name

        _, _, name, macros  = process_file(ros2control_abs)

        # grab the macro and its params of externally provided ros2 control file
        component['macros'] = []
        for name in macros:
            reqd_params = get_params_without_default(macros[name].params, macros[name].defaultmap, prefix)
            component['args'] = reqd_params
            param_keys = [param['name'] for param in reqd_params]
            macro_dict = {'name': name, 'params': param_keys}
            component['macros'].append(macro_dict)

        out = template.render(component=component)

    with open(xacropath, 'w') as f:
        f.writelines(out)
